import streamlit as st
import google.generativeai as genai
import os

# ==== C·∫§U H√åNH BAN ƒê·∫¶U ====

# --- M·∫≠t kh·∫©u b·∫£o v·ªá ·ª©ng d·ª•ng ---
PASSWORD = "ledacchien2024"  # B·∫°n c√≥ th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u n√†y

# --- H√†m ƒë·ªçc file ---
def rfile(name_file):
    """H√†m ƒë·ªçc n·ªôi dung t·ª´ file vƒÉn b·∫£n m·ªôt c√°ch an to√†n."""
    try:
        with open(name_file, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp '{name_file}'. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return None
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc t·ªáp '{name_file}': {e}")
        return None

# --- L·∫•y API Key v√† c·∫•u h√¨nh Gemini ---
try:
    # L·∫•y API key t·ª´ Streamlit secrets
    google_api_key = st.secrets.get("GOOGLE_API_KEY")
    if not google_api_key:
        st.error("L·ªói: Vui l√≤ng cung c·∫•p GOOGLE_API_KEY trong t·ªáp secrets.toml.")
        st.stop()
    genai.configure(api_key=google_api_key)
except Exception as e:
    st.error(f"L·ªói khi c·∫•u h√¨nh Gemini: {e}")
    st.stop()

# ==== KI·ªÇM TRA M·∫¨T KH·∫®U ====
def check_password():
    """Hi·ªÉn th·ªã m√†n h√¨nh ƒëƒÉng nh·∫≠p v√† ki·ªÉm tra m·∫≠t kh·∫©u."""
    if "authenticated" not in st.session_state:
        st.session_state["authenticated"] = False
    
    if not st.session_state["authenticated"]:
        st.title("üîí ƒêƒÉng nh·∫≠p")
        st.write("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ truy c·∫≠p ·ª©ng d·ª•ng.")
        password = st.text_input("M·∫≠t kh·∫©u:", type="password")
        if st.button("ƒêƒÉng nh·∫≠p"):
            if password == PASSWORD:
                st.session_state["authenticated"] = True
                st.rerun() # Ch·∫°y l·∫°i app sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
            else:
                st.error("Sai m·∫≠t kh·∫©u, vui l√≤ng th·ª≠ l·∫°i.")
        st.stop()

check_password()

# ==== KH·ªûI T·∫†O CHATBOT ====
def initialize_chat():
    """Kh·ªüi t·∫°o m√¥ h√¨nh v√† l·ªãch s·ª≠ chat n·∫øu ch∆∞a c√≥."""
    if "chat" not in st.session_state or "history" not in st.session_state:
        # ƒê·ªçc c√°c t·ªáp c·∫•u h√¨nh
        system_instruction = rfile("01.system_trainning.txt")
        model_name = rfile("module_gemini.txt").strip()
        initial_assistant_message = rfile("02.assistant.txt")

        if not all([system_instruction, model_name, initial_assistant_message]):
            st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o chatbot do thi·∫øu t·ªáp c·∫•u h√¨nh.")
            st.stop()

        # Kh·ªüi t·∫°o m√¥ h√¨nh GenerativeAI
        model = genai.GenerativeModel(
            model_name=model_name,
            system_instruction=system_instruction
        )
        
        # B·∫Øt ƒë·∫ßu phi√™n chat v·ªõi tin nh·∫Øn ch√†o m·ª´ng c·ªßa tr·ª£ l√Ω
        st.session_state.chat = model.start_chat(history=[])
        st.session_state.history = [
            {"role": "model", "parts": [initial_assistant_message]}
        ]

initialize_chat()


# ==== GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG ====

# --- Hi·ªÉn th·ªã logo v√† ti√™u ƒë·ªÅ ---
try:
    col1, col2, col3 = st.columns([3, 2, 3])
    with col2:
        st.image("logo.png", use_container_width=True)
except FileNotFoundError:
    st.warning("Kh√¥ng t√¨m th·∫•y t·ªáp 'logo.png'.")

title_content = rfile("00.xinchao.txt")
if title_content:
    st.markdown(
        f"""<h1 style="text-align: center; font-size: 24px;">{title_content}</h1>""",
        unsafe_allow_html=True
    )

# --- CSS ƒë·ªÉ t√πy ch·ªânh giao di·ªán chat ---
st.markdown(
    """
    <style>
        .stChat .st-emotion-cache-1c7y2kd {
            flex-direction: column-reverse;
        }
        .stChatMessage[data-testid="stChatMessage"] {
            border-radius: 15px;
            padding: 12px;
            margin-bottom: 10px;
            max-width: 80%;
        }
        .stChatMessage[data-testid="stChatMessage"]:has-text("B·∫°n:") {
            background-color: #e1f5fe; /* M√†u xanh nh·∫°t cho ng∆∞·ªùi d√πng */
            margin-left: auto;
        }
        .stChatMessage[data-testid="stChatMessage"]:has-text("Tr·ª£ l√Ω:") {
            background-color: #f1f8e9; /* M√†u xanh l√° nh·∫°t cho tr·ª£ l√Ω */
            margin-right: auto;
        }
        .stChatMessage p {
            margin: 0;
        }
    </style>
    """,
    unsafe_allow_html=True
)

# --- Hi·ªÉn th·ªã l·ªãch s·ª≠ chat ---
for message in st.session_state.history:
    role = "B·∫°n" if message["role"] == "user" else "Tr·ª£ l√Ω"
    with st.chat_message("assistant" if role == "Tr·ª£ l√Ω" else "user"):
         st.markdown(f"**{role}:** {message['parts'][0]}")

# --- √î nh·∫≠p li·ªáu v√† x·ª≠ l√Ω chat ---
if prompt := st.chat_input("B·∫°n c·∫ßn t∆∞ v·∫•n g√¨?"):
    # Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
    st.session_state.history.append({"role": "user", "parts": [prompt]})
    with st.chat_message("user"):
        st.markdown(f"**B·∫°n:** {prompt}")

    # G·ª≠i tin nh·∫Øn ƒë·∫øn Gemini v√† nh·∫≠n ph·∫£n h·ªìi
    with st.chat_message("assistant"):
        with st.spinner("Tr·ª£ l√Ω ƒëang so·∫°n c√¢u tr·∫£ l·ªùi..."):
            try:
                response = st.session_state.chat.send_message(prompt, stream=True)
                
                # Hi·ªÉn th·ªã ph·∫£n h·ªìi theo t·ª´ng ph·∫ßn (streaming)
                def stream_handler():
                    for chunk in response:
                        yield chunk.text
                
                full_response = st.write_stream(stream_handler)

                # L∆∞u ph·∫£n h·ªìi ho√†n ch·ªânh v√†o l·ªãch s·ª≠
                st.session_state.history.append({"role": "model", "parts": [full_response]})

            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi API c·ªßa Gemini: {e}")


import streamlit as st
import google.generativeai as genai
import os
from google.generativeai.types import HarmCategory, HarmBlockThreshold

# ==== C·∫§U H√åNH BAN ƒê·∫¶U ====

# --- H√†m ƒë·ªçc file ---
def rfile(name_file):
    """H√†m ƒë·ªçc n·ªôi dung t·ª´ file vƒÉn b·∫£n m·ªôt c√°ch an to√†n."""
    try:
        with open(name_file, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp '{name_file}'. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return None
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc t·ªáp '{name_file}': {e}")
        return None

# --- L·∫•y API Key v√† c·∫•u h√¨nh Gemini ---
try:
    google_api_key = st.secrets.get("GOOGLE_API_KEY")
    if not google_api_key:
        st.error("L·ªói: Vui l√≤ng cung c·∫•p GOOGLE_API_KEY trong t·ªáp secrets.toml.")
        st.stop()
    genai.configure(api_key=google_api_key)
except Exception as e:
    st.error(f"L·ªói khi c·∫•u h√¨nh Gemini: {e}")
    st.stop()

# ==== KI·ªÇM TRA M·∫¨T KH·∫®U (PHI√äN B·∫¢N C·∫¨P NH·∫¨T) ====
def check_password():
    """
    Hi·ªÉn th·ªã m√†n h√¨nh ƒëƒÉng nh·∫≠p v√† ki·ªÉm tra m·∫≠t kh·∫©u t·ª´ file.
    N·∫øu file password.txt tr·ªëng, t·ª± ƒë·ªông b·ªè qua ƒëƒÉng nh·∫≠p.
    """
    # N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p r·ªìi th√¨ kh√¥ng c·∫ßn l√†m g√¨ th√™m
    if st.session_state.get("authenticated", False):
        return

    password_from_file = rfile("password.txt")
    # N·∫øu kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file, h√†m rfile ƒë√£ b√°o l·ªói, ta ch·ªâ c·∫ßn d·ª´ng app
    if password_from_file is None:
        st.stop()
        
    # L·∫•y m·∫≠t kh·∫©u ƒë√£ c·∫•u h√¨nh (lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a)
    password_configured = password_from_file.strip()

    # TR∆Ø·ªúNG H·ª¢P 1: FILE TR·ªêNG -> T·ª∞ ƒê·ªòNG ƒêƒÇNG NH·∫¨P
    if not password_configured:
        st.session_state["authenticated"] = True
        return # B·ªè qua ph·∫ßn c√≤n l·∫°i c·ªßa h√†m v√† ti·∫øp t·ª•c ch·∫°y app

    # TR∆Ø·ªúNG H·ª¢P 2: FILE C√ì M·∫¨T KH·∫®U -> HI·ªÇN TH·ªä FORM ƒêƒÇNG NH·∫¨P
    st.title("üîí ƒêƒÉng nh·∫≠p")
    st.write("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ truy c·∫≠p ·ª©ng d·ª•ng.")
    password_input = st.text_input("M·∫≠t kh·∫©u:", type="password")
    
    if st.button("ƒêƒÉng nh·∫≠p"):
        if password_input == password_configured:
            st.session_state["authenticated"] = True
            st.rerun()
        else:
            st.error("Sai m·∫≠t kh·∫©u, vui l√≤ng th·ª≠ l·∫°i.")
    
    # D·ª´ng ·ª©ng d·ª•ng cho ƒë·∫øn khi ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    st.stop()

check_password()


# --- GIAO DI·ªÜN THANH B√äN (SIDEBAR) ---
with st.sidebar:
    st.title("‚öôÔ∏è T√πy ch·ªçn")
    
    if st.button("üóëÔ∏è X√≥a cu·ªôc tr√≤ chuy·ªán"):
        if "chat" in st.session_state: del st.session_state.chat
        if "history" in st.session_state: del st.session_state.history
        st.rerun()

    st.divider()
    st.markdown("M·ªôt s·∫£n ph·∫©m c·ªßa [L√™ ƒê·∫Øc Chi·∫øn](https://ledacchien.com)")


# ==== KH·ªûI T·∫†O CHATBOT ====
def initialize_chat():
    """Kh·ªüi t·∫°o m√¥ h√¨nh v√† l·ªãch s·ª≠ chat n·∫øu ch∆∞a c√≥."""
    if "chat" not in st.session_state or "history" not in st.session_state:
        model_name = rfile("module_gemini.txt")
        system_instruction = rfile("01.system_trainning.txt")
        initial_assistant_message = rfile("02.assistant.txt")

        if not all([model_name, system_instruction, initial_assistant_message]):
            st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o chatbot do thi·∫øu t·ªáp c·∫•u h√¨nh (model, system, assistant).")
            st.stop()

        model = genai.GenerativeModel(
            model_name=model_name.strip(),
            system_instruction=system_instruction,
            safety_settings={
                HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
            }
        )
        
        st.session_state.chat = model.start_chat(history=[])
        st.session_state.history = [
            {"role": "model", "parts": [initial_assistant_message]}
        ]

initialize_chat()

# ==== GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG ====
try:
    col1, col2, col3 = st.columns([3, 2, 3])
    with col2:
        st.image("logo.png", use_container_width=True)
except FileNotFoundError:
    st.warning("Kh√¥ng t√¨m th·∫•y t·ªáp 'logo.png'.")

title_content = rfile("00.xinchao.txt")
if title_content:
    st.markdown(
        f"""<h1 style="text-align: center; font-size: 24px;">{title_content}</h1>""",
        unsafe_allow_html=True
    )

# --- Hi·ªÉn th·ªã l·ªãch s·ª≠ chat ---
for message in st.session_state.history:
    role = "assistant" if message["role"] == "model" else "user"
    with st.chat_message(role):
        st.markdown(message['parts'][0])

# --- √î nh·∫≠p li·ªáu v√† x·ª≠ l√Ω chat ---
if prompt := st.chat_input("B·∫°n c·∫ßn t∆∞ v·∫•n g√¨?"):
    # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ v√† hi·ªÉn th·ªã ngay
    st.session_state.history.append({"role": "user", "parts": [prompt]})
    with st.chat_message("user"):
        st.markdown(prompt)

    # X·ª≠ l√Ω v√† hi·ªÉn th·ªã tin nh·∫Øn c·ªßa AI
    with st.chat_message("assistant"):
        with st.spinner("Tr·ª£ l√Ω ƒëang so·∫°n c√¢u tr·∫£ l·ªùi..."):
            try:
                # D√íNG ƒê√É S·ª¨A L·ªñI
                response = st.session_state.chat.send_message(prompt, stream=True)
                
                def stream_handler():
                    for chunk in response:
                        yield chunk.text
                
                full_response = st.write_stream(stream_handler)
                # Th√™m tin nh·∫Øn ho√†n ch·ªânh c·ªßa AI v√†o l·ªãch s·ª≠
                st.session_state.history.append({"role": "model", "parts": [full_response]})

            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi API c·ªßa Gemini: {e}")